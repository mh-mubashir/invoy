import os
import requests
from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse, JSONResponse
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = FastAPI()

# Google OAuth Configuration
CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI")

SCOPES = [
    "https://www.googleapis.com/auth/calendar.readonly",
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
    "openid"
]

# Step 1: Login and Redirect to Google Consent
@app.get("/auth/login")
def login():
    flow = Flow.from_client_config(
        {
            "web": {
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET,
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "redirect_uris": [REDIRECT_URI],
            }
        },
        scopes=SCOPES
    )
    flow.redirect_uri = REDIRECT_URI
    authorization_url, state = flow.authorization_url(
        access_type="offline",
        include_granted_scopes="true",
        prompt="consent"
    )
    return RedirectResponse(authorization_url)


# Step 2: Handle the Callback from Google
@app.get("/auth/callback")
def callback(request: Request):
    code = request.query_params.get("code")

    flow = Flow.from_client_config(
        {
            "web": {
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET,
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "redirect_uris": [REDIRECT_URI],
            }
        },
        scopes=SCOPES
    )
    flow.redirect_uri = REDIRECT_URI
    flow.fetch_token(code=code)

    credentials = flow.credentials
    access_token = credentials.token

    # Fetch basic user info
    user_info = requests.get(
        "https://www.googleapis.com/oauth2/v2/userinfo",
        headers={"Authorization": f"Bearer {access_token}"}
    ).json()

    # Return credentials for demo purposes (normally store securely)
    return JSONResponse({
        "message": "Login successful!",
        "user": user_info,
        "access_token": access_token,
        "refresh_token": credentials.refresh_token,
        "expires_in": credentials.expiry.isoformat()
    })


# Step 3: Fetch Calendar Events for a Month
@app.get("/calendar/events")
def get_calendar_events(access_token: str, month: int = 10, year: int = 2025):
    """Fetch all events for a given month."""
    from datetime import datetime, timedelta

    time_min = datetime(year, month, 1).isoformat() + "Z"
    if month == 12:
        time_max = datetime(year + 1, 1, 1).isoformat() + "Z"
    else:
        time_max = datetime(year, month + 1, 1).isoformat() + "Z"

    headers = {"Authorization": f"Bearer {access_token}"}
    params = {
        "timeMin": time_min,
        "timeMax": time_max,
        "singleEvents": True,
        "orderBy": "startTime"
    }

    response = requests.get(
        "https://www.googleapis.com/calendar/v3/calendars/primary/events",
        headers=headers,
        params=params
    )

    data = response.json()
    events = data.get("items", [])

    # Filter for business-related events
    business_events = [
        e for e in events if any(
            kw in e.get("summary", "").lower()
            for kw in ["meeting", "business", "sync", "client", "review"]
        )
    ]

    return {"total": len(business_events), "events": business_events}
